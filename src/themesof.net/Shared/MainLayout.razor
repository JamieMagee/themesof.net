@using System.Diagnostics
@using System.Web
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager;
@inject ValidationService ValidationService;

<nav class="navbar navbar-expand-sm navbar-dark bg-dotnet">
    <a class="navbar-brand" href="/">Themes of .NET</a>
    <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="navbar-collapse @NavMenuCssClass justify-content-between" id="navbarText">
        <ul class="navbar-nav">
            <li class="nav-item">
                <NavLink class="nav-link" href="roadmap">
                    <span class="oi oi-target"></span> Roadmap
                </NavLink>
            </li>
            <AuthorizeView Roles="product-team">
                <li class="nav-item">
                    <NavLink class="nav-link" href="leadership">
                        <span class="oi oi-compass"></span> Leadership
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="team">
                        <span class="oi oi-people"></span> Team
                    </NavLink>
                </li>
            </AuthorizeView>
            <li class="nav-item justify-content-around">
                <NavLink class="nav-link" href="query">
                    <span class="oi oi-script pr-1"></span> Query
                </NavLink>
            </li>
            <AuthorizeView Roles="product-team">
                <li class="nav-item">
                    <NavLink class="nav-link" href="validate">
                        <span class="oi oi-warning pr-1"></span> Validation <span class="badge badge-pill badge-secondary">@GetValidationIssues(context)</span>
                    </NavLink>
                </li>
            </AuthorizeView>
        </ul>
        <ul class="navbar-nav">
            <div class="dropdown">
                <button onclick="this.focus()" class="btn btn-dotnet dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Help
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" href="syntax">
                        <span class="oi oi-question-mark pr-1"></span> Syntax
                    </a>
                    <a class="dropdown-item" href="shortcuts">
                        <span class="oi oi-bolt"></span> Shortcuts
                    </a>
                    <div role="separator" class="dropdown-divider"></div>
                    <a class="dropdown-item" href="version">
                        <span class="oi oi-tag"></span> Version
                    </a>
                    <a class="dropdown-item" href="https://github.com/terrajobst/themesof.net-better">
                        <span class="oi oi-code pr-1"></span> Source
                    </a>
                    <div role="separator" class="dropdown-divider"></div>
                    <a class="dropdown-item" href="about">
                        <span class="oi oi-info pr-1"></span> About
                    </a>
                </div>
            </div>
            <AuthorizeView>
                <Authorized>
                    @{
                        Debug.Assert(@context.User.Identity is not null);
                    }
                    <div class="dropdown">
                        <button onclick="this.focus()" class="btn btn-dotnet dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @{
                                var avatarUrl = context.User.FindFirst("avatar_url");
                                if (avatarUrl != null)
                                {
                                    <img src="@avatarUrl.Value"
                                        class="mr-1"
                                        alt="@context.User.Identity.Name"
                                        style="border-radius: 50%"
                                        width="20"
                                        height="20" />
                                }
                            }
                            @context.User.Identity.Name
                        </button>
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" href="signout">Sign out</a>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <a class="btn btn-dotnet" href="signin?returnUrl=@GetReturnUrl()">Sign in</a>
                </NotAuthorized>
            </AuthorizeView>
        </ul>
    </div>
</nav>

<main class="container-fluid mt-3">
    @Body
</main>

@code {
    private bool _collapseNavMenu = true;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    private string GetReturnUrl()
    {
        return HttpUtility.UrlEncode(NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
    }

    private int? GetValidationIssues(AuthenticationState? context)
    {
        var userName = context?.User?.Identity?.Name;
        if (userName is null)
            return null;

        return ValidationService.Diagnostics.Count(d => d.Assignees.Any(a => a.Matches(userName)));
    }
}
